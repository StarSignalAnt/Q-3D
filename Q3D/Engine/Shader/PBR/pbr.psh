#define PI 3.14159265359
#define INV_PI 0.31830988618
#define dx 1.0

// Texture and Sampler declarations
Texture2D v_Texture;
SamplerState v_Texture_sampler;
Texture2D v_TextureNormal;
SamplerState v_TextureNormal_sampler;
Texture2D v_TextureMetal;
SamplerState v_TextureMetal_sampler;
Texture2D v_TextureRough;
SamplerState v_TextureRough_sampler;
TextureCube v_TextureEnvironment;
SamplerState v_TextureEnvironment_sampler;
TextureCube v_TextureShadow;
SamplerState v_TextureShadow_sampler;
Texture2D v_TextureDirShadow;
SamplerState v_TextureDirShadow_sampler;
// Constant buffer for shader parameters
cbuffer Constants
{
    float4x4 g_ModelMatrix;
    float4x4 g_ViewMatrix;
    float4x4 g_ProjectionMatrix;
    float4x4 g_MVPMatrix;
    float4x4 g_NormalMatrix;

    float4 g_CameraPosition;
    float4 g_LightPosition;     // Position for point/spot lights
    float4 g_LightDirection;    // Direction for directional/spot lights
    float4 g_LightColor;
    float4 g_LightIntensity;
    float4 g_LightRange;

    float4 g_ToneMapParams;   // x: Exposure, y: Gamma, z: AmbientStrength, w: EnvStrength
    float4 g_AmbientColor;    // Ambient light color (w component unused)
    float4 g_LightType;       // x: LightType (0=point, 1=directional, 2=spot), y-w: unused
    float4 g_SpotLightCone;   // x: inner cone angle (cos), y: outer cone angle (cos), z-w: unused
        float4x4 g_LightSpaceMatrix; 
};

// Input structure for the Pixel Shader
struct PSInput {
    float4 Pos : SV_POSITION;
    float3 Uv : TEXCOORD0;
    float4 v_Color : TEXCOORD1;
    float3 WorldPos : TEXCOORD2;
    float3 Normal : TEXCOORD3;
    float3 Tangent : TEXCOORD4;
    float3 Binormal : TEXCOORD5;
    float4 LightSpacePos : TEXCOORD6; 
    bool IsFrontFace : SV_IsFrontFace; // Use SV_IsFrontFace for modern HLSL
};

// Output structure for the Pixel Shader
struct PSOutput {
    float4 Color : SV_TARGET;
};

// Poisson disk samples for PCF - better distribution than grid sampling
static const float2 poissonDisk[64] = {
    float2(-0.5119625f, -0.4827938f), float2(-0.2171264f, -0.4768726f),
    float2(-0.7552931f, -0.2426507f), float2(-0.7136765f, -0.4496614f),
    float2(-0.5938849f, -0.6895654f), float2(-0.3148003f, -0.7047654f),
    float2(-0.42215f, -0.2024607f),   float2(-0.9466816f, -0.2014508f),
    float2(-0.8409063f, -0.03465778f),float2(-0.6517572f, -0.07476326f),
    float2(-0.1041822f, -0.02521214f),float2(-0.3042712f, -0.02195431f),
    float2(-0.5082307f, 0.1079806f),  float2(-0.08429877f, -0.2316298f),
    float2(-0.9879128f, 0.1113683f),  float2(-0.3859636f, 0.3363545f),
    float2(-0.1925334f, 0.1787288f),  float2(0.003256182f, 0.138135f),
    float2(-0.8706837f, 0.3010679f),  float2(-0.6982038f, 0.1904326f),
    float2(0.1975043f, 0.2221317f),   float2(0.1507788f, 0.4204168f),
    float2(0.3736842f, 0.0992177f),   float2(0.2755962f, 0.3837862f),
    float2(0.4208129f, 0.3939059f),   float2(-0.619281f, 0.3991883f),
    float2(-0.8909063f, 0.5581857f),  float2(-0.7113318f, 0.4793715f),
    float2(-0.1016345f, 0.2918514f),  float2(0.114176f, 0.6229897f),
    float2(-0.4744786f, 0.4793134f),  float2(-0.4960433f, 0.6738045f),
    float2(-0.2555429f, 0.4846391f),  float2(-0.2527843f, 0.6915522f),
    float2(0.3906806f, 0.5895476f),   float2(0.2312503f, 0.6502759f),
    float2(0.3174725f, 0.8142926f),   float2(0.4501316f, 0.7675345f),
    float2(0.7090497f, 0.2962982f),   float2(0.5138624f, 0.5363452f),
    float2(0.6553946f, 0.4963716f),   float2(0.8816461f, 0.1779471f),
    float2(0.8074444f, 0.4394513f),   float2(0.7434692f, 0.6444827f),
    float2(0.9473181f, 0.3917639f),   float2(0.5845366f, 0.7554039f),
    float2(0.08018959f, 0.8395522f),  float2(-0.07213406f, 0.5402345f),
    float2(0.5484939f, 0.09857893f),  float2(0.3902281f, -0.1317213f),
    float2(0.8014691f, 0.05027323f),  float2(0.6704675f, -0.1917517f),
    float2(0.5128567f, -0.3212506f),  float2(0.4535976f, -0.5365729f),
    float2(0.8550993f, -0.2677549f),  float2(0.2603398f, -0.3555028f),
    float2(0.07066406f, -0.5152038f), float2(0.9138564f, -0.4971786f),
    float2(0.1995048f, -0.7093687f),  float2(0.6502739f, -0.5987748f),
    float2(0.38385f, -0.7817748f),    float2(-0.1240084f, -0.8194467f),
    float2(0.8165304f, -0.6765896f),  float2(0.6210794f, -0.8524057f)
};
float CalculateDirectionalShadow(float4 lightSpacePos)
{
    // 1. Convert from clip space to NDC [-1, 1]
    float3 projCoords = lightSpacePos.xyz / lightSpacePos.w;

    // 2. Convert from NDC to texture coordinates [0, 1]
    projCoords.x = projCoords.x * 0.5 + 0.5;
    projCoords.y = 1.0 - (projCoords.y * 0.5 + 0.5); // Flip Y

    // 3. If we are outside the [0,1] range, this pixel is not in the shadow map.
    if (saturate(projCoords.x) != projCoords.x || saturate(projCoords.y) != projCoords.y)
    {
        return 1.0; // Return full light
    }

    // 4. Get the depth of the current pixel from the light's perspective
    float currentDepth = projCoords.z;

    // 5. Sample the depth stored in the shadow map
    float shadowMapDepth = v_TextureDirShadow.Sample(v_TextureDirShadow_sampler, projCoords.xy).r;

    // 6. Use a simple, constant bias
    float bias = 0.005;

    // 7. Perform the comparison
    if (currentDepth > shadowMapDepth + bias)
    {
        return 0.0; // The pixel is in shadow
    }
    else
    {
        return 1.0; // The pixel is lit
    }
}
// Calculates shadow contribution for a point light.
float light_GetShadow(float3 fragPos, float3 lightPos, float lightRange)
{
    float3 fragToLight = fragPos - lightPos;
    fragToLight.z = -fragToLight.z;

    float currentDepth = abs(distance(fragPos, lightPos));
    currentDepth = currentDepth / lightRange;

    int samples = 20;
    float shadowVal = 0;

    for (int i = 0; i < samples; i++)
    {
        // Note: Poisson disk samples are not used here, could be an improvement.
        float closestDepth = v_TextureShadow.Sample(v_TextureShadow_sampler, normalize(fragToLight)).r;

        if(closestDepth>0.99) return 1.0;

        if (closestDepth > currentDepth - 0.001 && closestDepth < currentDepth + 0.0011)
        {
            shadowVal += 0;
        }
        else if ((currentDepth - 0.0013) > closestDepth)
        {
            shadowVal += 1.0f;
        }
    }

    shadowVal = shadowVal / (float)samples;
    return 1.0 - shadowVal;
}

// Tone mapping functions
float3 ACESFilmicToneMapping(float3 color)
{
    const float a = 2.51;
    const float b = 0.03;
    const float c = 2.43;
    const float d = 0.59;
    const float e = 0.14;
    return saturate((color * (a * color + b)) / (color * (c * color + d) + e));
}

// Gets the world-space normal from a normal map.
float3 getNormalFromMap(float3 normalMap, float3 worldNormal, float3 worldTangent, float3 worldBinormal)
{
    // Unpack normal from [0,1] to [-1,1]
    float3 tangentNormal = normalMap * 2.0 - 1.0;

    // Ensure all vectors are normalized
    float3 N = normalize(worldNormal);
    float3 T = normalize(worldTangent);
    float3 B = normalize(worldBinormal);

    // Create TBN matrix (tangent space to world space)
    float3x3 TBN = float3x3(T, B, N);

    // Transform normal from tangent space to world space
    return normalize(mul(tangentNormal, TBN));
}

// PBR Helper Functions //

float DistributionGGX(float3 N, float3 H, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = saturate(dot(N, H));
    float NdotH2 = NdotH * NdotH;

    float denom = NdotH2 * (a2 - 1.0) + 1.0;
    return a2 / (PI * denom * denom);
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = roughness + 1.0;
    float k = (r * r) * 0.125;
    return NdotV / (NdotV * (1.0 - k) + k);
}

float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
    float NdotV = saturate(dot(N, V));
    float NdotL = saturate(dot(N, L));
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);
    return ggx1 * ggx2;
}

float3 fresnelSchlick(float cosTheta, float3 F0)
{
    return F0 + (1.0 - F0) * pow(saturate(1.0 - cosTheta), 5.0);
}

float calculateAttenuation(float3 lightPos, float3 worldPos, float range)
{
    float dist = length(lightPos - worldPos);
    float normalizedDist = saturate(dist / range);
    float falloff = saturate(1.0 - normalizedDist * normalizedDist);
    falloff *= falloff;
    return falloff / max(dist * dist, 0.0001);
}

float calculateSpotAttenuation(float3 lightDir, float3 fragmentToLight, float innerCone, float outerCone)
{
    float cosTheta = dot(normalize(lightDir), normalize(-fragmentToLight));
    float epsilon = innerCone - outerCone;
    float intensity = saturate((cosTheta - outerCone) / epsilon);
    return intensity * intensity;
}
void calculateLightProperties(float3 worldPos, out float3 lightDir, out float attenuation)
{
    int lightType = (int)g_LightType.x;
    attenuation = 1.0;

    if (lightType == 0) // Point light
    {
        lightDir = normalize(g_LightPosition.xyz - worldPos);
        attenuation = calculateAttenuation(g_LightPosition.xyz, worldPos, g_LightRange.x);
    }
    else if (lightType == 1) // Directional light
    {
        lightDir = normalize(-g_LightDirection.xyz);
        attenuation = 0.5; // Fixed attenuation for directional light
    }
    else if (lightType == 2) // Spot light
    {
        float3 fragmentToLight = g_LightPosition.xyz - worldPos;
        lightDir = normalize(fragmentToLight);
        float distanceAttenuation = calculateAttenuation(g_LightPosition.xyz, worldPos, g_LightRange.x);
        float spotAttenuation = calculateSpotAttenuation(g_LightDirection.xyz, fragmentToLight, g_SpotLightCone.x, g_SpotLightCone.y);
        attenuation = distanceAttenuation * spotAttenuation;
    }
    else // Default case
    {
        lightDir = normalize(g_LightPosition.xyz - worldPos);
        attenuation = calculateAttenuation(g_LightPosition.xyz, worldPos, g_LightRange.x);
    }
}

float calculateAmbientOcclusion(float shadowValue, float aoStrength)
{
    float ao = lerp(1.0, shadowValue, aoStrength);
    return saturate(ao);
}

void main(in PSInput I, out PSOutput O)
{
    // Sample material properties from textures
    float4 albedoSample = v_Texture.Sample(v_Texture_sampler, I.Uv.xy);
    float4 albedo = pow(albedoSample, 2.2) * I.v_Color;
    float3 normalSample = v_TextureNormal.Sample(v_TextureNormal_sampler, I.Uv.xy).rgb;
    float metallic = v_TextureMetal.Sample(v_TextureMetal_sampler, I.Uv.xy).r;
    float roughness = v_TextureRough.Sample(v_TextureRough_sampler, I.Uv.xy).r;
    roughness = clamp(roughness, 0.04, 1.0);

    // Get light properties first, as the light vector L is needed for the geometry check.
     float3 L;
    float attenuation;

      calculateLightProperties(I.WorldPos, L, attenuation);

    // Perform a check against the geometry normal first to prevent light bleed on back-faces.

    
    // --- If the geometry check passed, proceed with full per-pixel lighting ---

    // Get world-space normal from the normal map.
    float3 N = getNormalFromMap(normalSample, I.Normal, I.Tangent, I.Binormal);
    float3 V = normalize(g_CameraPosition.xyz - I.WorldPos);
    N = I.IsFrontFace ? N : -N;
    float shadowValue = 1.0;
    int lightType = (int)g_LightType.x;

    if (lightType == 0) // Point Light
    {
        shadowValue = light_GetShadow(I.WorldPos, g_LightPosition.xyz, g_LightRange.x);
    }
    else if (lightType == 1) // Directional Light
    {
        // Call the updated function with the necessary parameters
        shadowValue = CalculateDirectionalShadow(I.LightSpacePos);
    }
    else if (lightType == 2) // Spot Light
    {
        shadowValue = light_GetShadow(I.WorldPos, g_LightPosition.xyz, g_LightRange.x);
    }
    // Initialize outgoing radiance
    float3 Lo = float3(0.0, 0.0, 0.0);
    
    // --- All lighting calculations happen inside this block ---
    float3 F0 = lerp(float3(0.04, 0.04, 0.04), albedo.rgb, metallic);
    float ambientOcclusion = calculateAmbientOcclusion(shadowValue, 0.6);

    // Direct lighting
    float NdotL = saturate(dot(N, L));
    if (NdotL > 0.0)
    {
        float3 H = normalize(V + L);
        float NDF = DistributionGGX(N, H, roughness);
        float G = GeometrySmith(N, V, L, roughness);
        float3 F = fresnelSchlick(saturate(dot(H, V)), F0);
        float3 kS = F;
        float3 kD = (1.0 - kS) * (1.0 - metallic);
        float3 numerator = NDF * G * F;
        float denominator = 4.0 * saturate(dot(N, V)) * NdotL + 0.0001;
        float3 specular = numerator / denominator;
        float3 radiance = g_LightColor.rgb * g_LightIntensity.x * attenuation;
        Lo += (kD * albedo.rgb * INV_PI + specular) * radiance * NdotL * shadowValue;
    }
    
    // Indirect (environment) lighting
    float envStrength = g_ToneMapParams.w > 0.0 ? g_ToneMapParams.w : 1.0;
    float shadowedEnvStrength = envStrength * ambientOcclusion;
    float3 R = reflect(-V, N);
    float3 envSpecular = v_TextureEnvironment.Sample(v_TextureEnvironment_sampler, R).rgb;
    float3 envDiffuse = v_TextureEnvironment.Sample(v_TextureEnvironment_sampler, N).rgb;
    float3 F_env = fresnelSchlick(saturate(dot(N, V)), F0);
    float3 kS_env = F_env * 0.25 * shadowedEnvStrength;
    float3 kD_env = (1.0 - F_env) * (1.0 - metallic) * 0.08 * shadowedEnvStrength;
    float envIntensity = lerp(0.3, 0.04, roughness) * ambientOcclusion;
    float3 envSpecularModulated = envSpecular * envIntensity;
    float3 diffuseEnv = kD_env * albedo.rgb * envDiffuse;
    float3 specularEnv = kS_env * envSpecularModulated;

    // Ambient lighting
    float3 ambient = g_AmbientColor.xyz * g_ToneMapParams.z * albedo.rgb * ambientOcclusion;

    // Combine lighting
    Lo += ambient + diffuseEnv + specularEnv;
    
    // Post-processing
    Lo = ACESFilmicToneMapping(Lo);
    float gamma = max(g_ToneMapParams.y, 1.0);
    Lo = pow(max(Lo, 0.0), 1.0 / gamma);

    

    // Final color
    O.Color = float4(Lo, albedo.a);
}
