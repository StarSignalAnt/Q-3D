    #define dx 1.0

    Texture2D v_Texture;
    SamplerState v_Texture_sampler;


    struct PSInput
    {
        float4 Pos : SV_POSITION;
        float3 Uv : TEX_COORD;
        float4 v_Color : COLOR2;
        float4 v_View : COLOR3;
    
    // float3 Norm : NORMAL0;x
    };

    struct PSOutput
    {
        float4 Color : SV_TARGET;
    };

    // Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
    // shader output variable name must match exactly the name of the pixel shader input variable.
    // If the variable has structure type (like in this example), the structure declarations must also be identical.
    void main(in PSInput PSIn,
        out PSOutput PSOut)
    {

        float depthValue = v_Texture.Sample(v_Texture_sampler, PSIn.Uv.xy).r;

    // 2. Create a grayscale color by using the depth value for all three (R, G, B) color channels.
    float4 textureColor = float4(depthValue, depthValue, depthValue, 1.0);
    
    // 3. Multiply by the vertex color to allow tinting (like you do already).
    PSOut.Color = textureColor * PSIn.v_Color;


    }