#define dx 1.0

Texture2D v_Texture;
SamplerState v_Texture_sampler;
#define OUTLINE_THICKNESS 2
// Adjusts how sensitive the edge detection is to changes in depth.
// Smaller values detect more subtle edges.
#define DEPTH_SENSITIVITY 0.01

struct PSInput
{
    float4 Pos : SV_POSITION;
    float3 Uv : TEX_COORD;
    float4 v_Color : COLOR2;
 
 // float3 Norm : NORMAL0;x
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in PSInput PSIn,
    out PSOutput PSOut)
{
   // Get the size of a single pixel in UV coordinates
    float2 texelSize;
    v_Texture.GetDimensions(texelSize.x, texelSize.y);
    texelSize = 1.0 / texelSize;

    // Sample the depth of the center pixel
    float centerDepth = v_Texture.Sample(v_Texture_sampler, PSIn.Uv.xy).r;

    float maxDepthDiff = 0.0;

    // Loop through a grid around the center pixel
    for (int x = -OUTLINE_THICKNESS; x <= OUTLINE_THICKNESS; ++x)
    {
        for (int y = -OUTLINE_THICKNESS; y <= OUTLINE_THICKNESS; ++y)
        {
            if (x == 0 && y == 0)
                continue;

            // Calculate sample coordinate
            float2 sampleCoord = PSIn.Uv.xy + float2(x, y) * texelSize;

            // --- BUG FIX ---
            // Check if the sample coordinate is within the screen bounds [0, 1]
            // If it's outside, skip this sample to prevent texture wrapping.
            if (sampleCoord.x < 0.0 || sampleCoord.x > 1.0 || 
                sampleCoord.y < 0.0 || sampleCoord.y > 1.0)
            {
                continue;
            }

            // Sample the depth of the neighboring pixel
            float sampleDepth = v_Texture.Sample(v_Texture_sampler, sampleCoord).r;

            // Calculate the difference and update the maximum
            float depthDiff = abs(centerDepth - sampleDepth);
            maxDepthDiff = max(maxDepthDiff, depthDiff);
        }
    }

    // If the maximum depth difference is significant, it's an edge
    if (maxDepthDiff > DEPTH_SENSITIVITY)
    {
        PSOut.Color = float4(0.0, 1.0, 0.0, 1.0); // Green outline
    }
    else
    {
        discard;
    }
}