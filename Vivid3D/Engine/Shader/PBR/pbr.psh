#define PI 3.14159265359
#define INV_PI 0.31830988618
#define dx 1.0

Texture2D v_Texture;
SamplerState v_Texture_sampler;
Texture2D v_TextureNormal;
SamplerState v_TextureNormal_sampler;
Texture2D v_TextureMetal;
SamplerState v_TextureMetal_sampler;
Texture2D v_TextureRough;
SamplerState v_TextureRough_sampler;
TextureCube v_TextureEnvironment;
SamplerState v_TextureEnvironment_sampler;
TextureCube v_TextureShadow;
SamplerState v_TextureShadow_sampler;


cbuffer Constants
{
    float4x4 g_ModelMatrix;
    float4x4 g_ViewMatrix;
    float4x4 g_ProjectionMatrix;
    float4x4 g_MVPMatrix;
    float4x4 g_NormalMatrix;

    float4 g_CameraPosition;
    float4 g_LightPosition;
    float4 g_LightColor;
    float4 g_LightIntensity;
    float4 g_LightRange;

    float4 g_ToneMapParams;  // x: Exposure, y: Gamma, z: AmbientStrength, w: EnvStrength
    float4 g_AmbientColor;   // Ambient light color (w component unused)
};

struct PSInput {
    float4 Pos : SV_POSITION;
    float3 Uv : TEXCOORD0;
    float4 v_Color : TEXCOORD1;
    float3 WorldPos : TEXCOORD2;
    float3 Normal : TEXCOORD3;
    float3 Tangent : TEXCOORD4;
    float3 Binormal : TEXCOORD5;
};

struct PSOutput {
    float4 Color : SV_TARGET;
};


static const float3 sampleOffsetDirections[20] = {
   float3( dx,  dx,  dx), float3( dx, -dx,  dx), float3(-dx, -dx,  dx), float3(-dx,  dx,  dx),
   float3( dx,  dx, -dx), float3( dx, -dx, -dx), float3(-dx, -dx, -dx), float3(-dx,  dx, -dx),
   float3( dx,  dx,  0), float3( dx, -dx,  0), float3(-dx, -dx,  0), float3(-dx,  dx,  0),
   float3( dx,  0,  dx), float3(-dx,  0,  dx), float3( dx,  0, -dx), float3(-dx,  0, -dx),
   float3( 0,  dx,  dx), float3( 0, -dx,  dx), float3( 0, -dx, -dx), float3( 0,  dx, -dx)
};


float light_GetShadow(float3 fragPos,float3 lightPos,float lightRange){

    float3 fragToLight = fragPos - lightPos;
   
   // fragToLight.x = - fragToLight.x;
   // fragToLight.y = - fragToLight.y;
    fragToLight.z = - fragToLight.z;

    float currentDepth = abs(distance(fragPos,lightPos));

    int samples = 20;
    float diskRadius = 0.0025f;
    float bias = 0.005;
    float shadowVal = 0;
    currentDepth = currentDepth / lightRange;

    for(int i=0;i<samples;i++){

        float closestDepth = v_TextureShadow.Sample(v_TextureShadow_sampler,normalize(fragToLight)).r;


        if(closestDepth>currentDepth-0.001 && closestDepth<currentDepth+0.0011)
        {
            shadowVal += 0;
        }else
        if( (currentDepth-0.0013)>closestDepth)
        {

         shadowVal +=1.0f;
        

        }

    }


    shadowVal = shadowVal / (float)samples;
   
 //   shadowVal = shadowVal * v_Shadow.Sample(v_Shadow_sampler,normalize(fragToLight)).g;
   


    shadowVal = 1.0 - shadowVal;
    
    //shadowVal =shadowVal * v_Shadow.Sample(v_Shadow_sampler,normalize(fragToLight)).g;

    

    return shadowVal;

}


// Tone mapping functions
float3 ACESFilmicToneMapping(float3 color)
{
    const float a = 2.51;
    const float b = 0.03;
    const float c = 2.43;
    const float d = 0.59;
    const float e = 0.14;
    return saturate((color * (a * color + b)) / (color * (c * color + d) + e));
}

// Normal mapping
float3 getNormalFromMap(float3 normalMap, float3 worldNormal, float3 worldTangent, float3 worldBinormal)
{
    float3 n = normalMap * 2.0 - 1.0;
    float3x3 TBN = float3x3(normalize(worldTangent), normalize(worldBinormal), normalize(worldNormal));
    return normalize(mul(n, TBN));
}

// GGX distribution function
float DistributionGGX(float3 N, float3 H, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = saturate(dot(N, H));
    float NdotH2 = NdotH * NdotH;

    float denom = NdotH2 * (a2 - 1.0) + 1.0;
    return a2 / (PI * denom * denom);
}

// Geometry function
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = roughness + 1.0;
    float k = (r * r) * 0.125;
    return NdotV / (NdotV * (1.0 - k) + k);
}

float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
    float NdotV = saturate(dot(N, V));
    float NdotL = saturate(dot(N, L));
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);
    return ggx1 * ggx2;
}

// Fresnel function
float3 fresnelSchlick(float cosTheta, float3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

// Light attenuation
float calculateAttenuation(float3 lightPos, float3 worldPos, float range)
{
    float dist = length(lightPos - worldPos);
    float normalizedDist = saturate(dist / range);
    float falloff = saturate(1.0 - normalizedDist * normalizedDist);
    falloff *= falloff;
    return falloff / max(dist * dist, 0.0001);
}

void main(in PSInput I, out PSOutput O)
{
    // Sample textures
    float4 albedoSample = v_Texture.Sample(v_Texture_sampler, I.Uv.xy);
    float4 albedo = pow(albedoSample, 2.2) * I.v_Color;
    float3 normalSample = v_TextureNormal.Sample(v_TextureNormal_sampler, I.Uv.xy).rgb;
    float metallic = v_TextureMetal.Sample(v_TextureMetal_sampler, I.Uv.xy).r;
    float roughness = v_TextureRough.Sample(v_TextureRough_sampler, I.Uv.xy).r;
    roughness = clamp(roughness, 0.04, 1.0);

    // Compute normals
    float3 geoN = normalize(I.Normal);
    float3 N = getNormalFromMap(normalSample, geoN, I.Tangent, I.Binormal);
    float3 V = normalize(g_CameraPosition.xyz - I.WorldPos);

    // Compute reflectance at normal incidence
    float3 F0 = lerp(float3(0.04, 0.04, 0.04), albedo.rgb, metallic);

    // Initialize lighting
    float3 Lo = float3(0.0, 0.0, 0.0);

    // Direct lighting
    float3 L = normalize(g_LightPosition.xyz - I.WorldPos);
    float NdotL = saturate(dot(N, L));
    if (NdotL > 0.0)
    {
        float attenuation = calculateAttenuation(g_LightPosition.xyz, I.WorldPos, g_LightRange.x);
        float3 radiance = g_LightColor.rgb * g_LightIntensity.x * attenuation;

        float3 H = normalize(V + L);
        float NDF = DistributionGGX(N, H, roughness);
        float G = GeometrySmith(N, V, L, roughness);
        float3 F = fresnelSchlick(saturate(dot(H, V)), F0);

        float3 kS = F;
        float3 kD = (1.0 - kS) * (1.0 - metallic);

        float3 numerator = NDF * G * F;
        float denominator = 4.0 * saturate(dot(N, V)) * NdotL + 0.0001;
        float3 specular = numerator / denominator;

        Lo += (kD * albedo.rgb * INV_PI + specular) * radiance * NdotL;

        float shadowVal = light_GetShadow(I.WorldPos,g_LightPosition.xyz,g_LightRange.x);

        Lo *= shadowVal;
    


    }

    // Environment lighting
    float envStrength = g_ToneMapParams.w > 0.0 ? g_ToneMapParams.w : 1.0;
    float3 R = reflect(-V, N);
    float3 envSpecular = v_TextureEnvironment.Sample(v_TextureEnvironment_sampler, R).rgb;
    float3 envDiffuse = v_TextureEnvironment.Sample(v_TextureEnvironment_sampler, N).rgb;

    float3 F_env = fresnelSchlick(saturate(dot(N, V)), F0);
    float3 kS_env = F_env * 0.3 * envStrength;
    float3 kD_env = (1.0 - F_env) * (1.0 - metallic) * 0.1 * envStrength;

    float envIntensity = lerp(0.4, 0.05, roughness);
    float3 envSpecularModulated = envSpecular * envIntensity;

    float3 diffuseEnv = kD_env * albedo.rgb * envDiffuse;
    float3 specularEnv = kS_env * envSpecularModulated;

    // Ambient lighting
    float3 ambient = g_AmbientColor.xyz * g_ToneMapParams.z * albedo.rgb;

    // Combine lighting
    Lo += ambient + diffuseEnv + specularEnv;

    // Tone mapping
    Lo = ACESFilmicToneMapping(Lo);

    // Gamma correction
    float gamma = max(g_ToneMapParams.y, 1.0);
    Lo = pow(max(Lo, 0.0), 1.0 / gamma);



    O.Color = float4(Lo, albedo.a);
}
