#define dx 1.0

Texture2D    v_Texture;
SamplerState v_Texture_sampler;
Texture2D v_TextureNorm;
SamplerState v_TextureNorm_sampler;
Texture2D v_TextureSpec;
SamplerState v_TextureSpec_sampler;
Texture2D v_TextureLayer;
SamplerState v_TextureLayer_sampler;
TextureCube v_Shadow;
SamplerState v_Shadow_sampler;

// Constants buffer for lighting calculations
cbuffer LightingConstants
{
    float4 v_CameraPos;
    float4 v_LightPos;
    float4 v_LightDiff;
    float4 v_LightRange;
    int4 v_Layers;
}

static const float3 sampleOffsetDirections[20] = {
   float3( dx,  dx,  dx), float3( dx, -dx,  dx), float3(-dx, -dx,  dx), float3(-dx,  dx,  dx), 
   float3( dx,  dx, -dx), float3( dx, -dx, -dx), float3(-dx, -dx, -dx), float3(-dx,  dx, -dx),
   float3( dx,  dx,  0), float3( dx, -dx,  0), float3(-dx, -dx,  0), float3(-dx,  dx,  0),
   float3( dx,  0,  dx), float3(-dx,  0,  dx), float3( dx,  0, -dx), float3(-dx,  0, -dx),
   float3( 0,  dx,  dx), float3( 0, -dx,  dx), float3( 0, -dx, -dx), float3( 0,  dx, -dx)
};

struct PSInput 
{ 
    float4 Pos   : SV_POSITION;
    float4 Color : COLOR0;
    float3 Norm : NORMAL0;
    float3 Uv : TEX_COORD;
    float3 LayerCoord : NORMAL6;
    float3 WorldPos : NORMAL1;
    float3 Tangent : NORMAL2;    // World space tangent
    float3 Bitangent : NORMAL3;  // World space bitangent
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

// Function to calculate per-pixel lighting with proper normal mapping and specular map
float3 CalculateLighting(float3 worldPos, float3 worldNormal, float3 albedo, float specularIntensity)
{
    // Normalize the normal (should already be normalized, but good practice)
    worldNormal = normalize(worldNormal);
    
    // Calculate light direction
    float3 lightDir = normalize(v_LightPos.xyz - worldPos);
    
    // Calculate view direction
    float3 viewDir = normalize(v_CameraPos.xyz - worldPos);
    
    // Diffuse lighting (Lambert)
    float NdotL = max(dot(worldNormal, lightDir), 0.0);
    float3 diffuse = albedo * v_LightDiff.rgb * NdotL;
    
    // Specular lighting (Blinn-Phong) with specular map intensity
    float3 halfwayDir = normalize(lightDir + viewDir);
    float NdotH = max(dot(worldNormal, halfwayDir), 0.0);
    float specularPower = 32.0; // Fixed shininess
    
    float specular = pow(NdotH, specularPower) * specularIntensity;
    
    // Ambient lighting
    //float3 ambient = albedo * 0.1; // 10% ambient
    
    return diffuse + specular * v_LightDiff.rgb;
}


float light_GetShadow(float3 fragPos, float3 lightPos, float lightRange)
{
    float3 fragToLight = fragPos - lightPos;
    fragToLight.z = -fragToLight.z;

    float currentDepth = abs(distance(fragPos, lightPos));
    currentDepth = currentDepth / lightRange;

    int samples = 20;
    float shadowVal = 0;

    for (int i = 0; i < samples; i++)
    {
        float closestDepth = v_Shadow.Sample(v_Shadow_sampler, normalize(fragToLight)).r;

        if (closestDepth > currentDepth - 0.001 && closestDepth < currentDepth + 0.0011)
        {
            shadowVal += 0;
        }
        else if ((currentDepth - 0.0013) > closestDepth)
        {
            shadowVal += 1.0f;
        }
    }

    shadowVal = shadowVal / (float)samples;
    return 1.0 - shadowVal;
}

void main(in PSInput PSIn, out PSOutput PSOut)
{
    // Sample the diffuse texture
    float4 albedo = v_Texture.Sample(v_Texture_sampler, PSIn.Uv);
    
    // Sample the normal map and convert from [0,1] to [-1,1]
    float3 normalMap = v_TextureNorm.Sample(v_TextureNorm_sampler, PSIn.Uv).rgb;
    normalMap = normalMap * 2.0 - 1.0;
    
    // Sample the specular map and use only the red channel for specular intensity
    float specularIntensity = v_TextureSpec.Sample(v_TextureSpec_sampler, PSIn.Uv).r;
    
    // Create the TBN matrix to transform from tangent space to world space
    float3 N = normalize(PSIn.Norm);
    float3 T = normalize(PSIn.Tangent);
    float3 B = normalize(PSIn.Bitangent);
    
    // Ensure orthogonality (Gram-Schmidt process)
    T = normalize(T - dot(T, N) * N);
    B = normalize(B - dot(B, N) * N - dot(B, T) * T);
    
    // Create TBN matrix
    float3x3 TBN = float3x3(T, B, N);
    
    // Transform normal from tangent space to world space
    float3 worldNormal = normalize(mul(normalMap, TBN));
    //

    float shadowValue = light_GetShadow(PSIn.WorldPos, v_LightPos.xyz, v_LightRange.x);

    
    // Sample the layer texture
    float l_val = v_TextureLayer.Sample(v_TextureLayer_sampler, PSIn.LayerCoord).r;
    
    // Calculate per-pixel lighting using the properly transformed normal and specular intensity
    float3 litColor = CalculateLighting(PSIn.WorldPos, worldNormal, albedo.rgb, specularIntensity);
    

    float dis = length(PSIn.WorldPos-v_LightPos.xyz);

    float sv = dis / v_LightRange.x;

    if(sv>1.0) sv=1.0;

    sv = 1.0-sv;

    // Apply your existing layering logic
    if(v_Layers.x == 0)
    {
        // For layer 0, apply the lighting with layer value and shadow
        // Note: You'll need to implement shadow calculation for shadowVal
        //float shadowVal = 1.0; // Placeholder - implement proper shadow sampling
        float light = 1.0;     // Placeholder - use your lighting intensity
        float light_v = 1.0;   // Placeholder - use your lighting value
        

        PSOut.Color = float4(litColor * l_val * light_v * shadowValue * light*sv, 1.0);
        return;
    }
    
    // For other layers, use the lit color with layer alpha
    PSOut.Color = float4(litColor*shadowValue*sv, l_val);
}